########################################################################
##                Template for SOM-CVODE codegen.                     ##
##           This is work in progress. Expect major changes.          ##
########################################################################
########################################################################
#macro (rollK $map)#foreach ($k in $map.keySet())$k, #end#end
########################################################################
#macro (rollV $map)#foreach ($k in $map.keySet())$map.get($k), #end#end
########################################################################
#macro (unpackNames $map)#foreach ($k in $map.keySet())$prefix $k = $map.get($k);
#end#end##
########################################################################
#macro (idx2names $name $map)#foreach ($k in $map.keySet())#set($i = $velocityCount-1)$prefix $k = ${name}[$i];
#end#end##
########################################################################
#macro (NV2names $name $map)#foreach ($k in $map.keySet())#set($i = $velocityCount-1)$prefix $k = NV_Ith_S(${name}, $i);
#end#end##
########################################################################
#macro (intoNV $name $map)#foreach ($k in $map.keySet())#set($i = $velocityCount-1)$prefix NV_Ith_S(${name}, $i) = $map.get($k);
#end#end##
########################################################################
#macro (sign2num $s)#if ($s == "+")1#elseif($s == "-")-1#elseif($s == "0")0#else???#end#end##
########################################################################
#set ($idt1 = "    ")
#set ($idt2 = "$idt1$idt1")
#set ($idt3 = "$idt2$idt1")
#set ($idt4 = "$idt2$idt2")
########################################################################
########################################################################
/*****************************************************************/
/* C code automatically generated from a LEMS/SEM description.   */
/* Compile with enclosed Makefile.                               */
/* Work in progress, expect substantial changes in the template. */
/*****************************************************************/

\#include <stdio.h>
\#include <math.h>
\#include <sundials/sundials_types.h> 
\#include <nvector/nvector_serial.h>  
\#include <cvode/cvode_dense.h>       
\#include <cvode/cvode.h>             

/* Problem Constants */
\#define NEQ   $dynamics.size() /* number of equations */
\#define NRF   $events.size() /* number of rootfinding functions */
\#define RTOL  RCONST(1.0e-4)   /* scalar relative tolerance */
\#define ATOL0 RCONST(1.0e-6)   /* vector absolute tolerance components */
\#define ATOL1 RCONST(1.0e-6)
\#define ATOL2 RCONST(1.0e-6)
\#define T0    RCONST($t_start)/* initial time */
\#define T1    RCONST($t_end)  /* total integration time */
\#define DT    RCONST($dt)     /* output stepsize */

########################################################################
static int dstate_dt(realtype t, N_Vector state, N_Vector dstate,  void *p){
    realtype pars[$parameters.size()] = (realtype *) p;

#set($prefix = "${idt1}realtype")
#NV2names("state", $state)

#idx2names("pars", $parameters)

#unpackNames($state_functions)

#set($prefix = ${idt1})#
#intoNV("dstate", $dynamics) 

    return(0);
}

#if($events)##
static int root_functions(realtype t, N_Vector state, realtype *gout, void *params)
{
  realtype x;

#NV2names("state", $state)
#idx2names("pars", $parameters)
#unpackNames($state_functions)

#foreach($e in $events)## 
    //$e.name
#set($i=$velocityCount-1)##
    NV_Ith_S(gout, $i) = $e.condition;

#end
    return(0);
}
#end##if($events)


