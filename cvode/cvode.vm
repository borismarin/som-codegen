########################################################################
##                Template for SOM-CVODE codegen.                     ##
##           This is work in progress. Expect major changes.          ##
########################################################################
########################################################################
#macro (rollK $map)#foreach ($k in $map.keySet())$k, #end#end
########################################################################
#macro (rollV $map)#foreach ($k in $map.keySet())$map.get($k), #end#end
########################################################################
#set($Declare_float="realtype ")
########################################################################
#macro (unpackNames $map)#foreach ($k in $map.keySet())$prefix$Declare_float$k = $map.get($k);
#end#end##
########################################################################
#macro (idx2names $name $map)#foreach ($k in $map.keySet())#set($i = $velocityCount-1)$prefix$Declare_float$k = ${name}[$i];
#end#end##
########################################################################
#macro (NV2names $name $map)#foreach ($k in $map.keySet())#set($i = $velocityCount-1)$prefix$Declare_float$k = NV_Ith_S(${name}, $i);
#end#end##
########################################################################
#macro (NV2names_dynsort $name $map)#foreach ($k in $dynamics.keySet())#set($i = $velocityCount-1)$prefix$Declare_float$k = NV_Ith_S(${name}, $i);
#end#end##
########################################################################
#macro (intoNV $name $map)#foreach ($k in $map.keySet())#set($i = $velocityCount-1)${prefix}NV_Ith_S(${name}, $i) = $map.get($k);
#end#end##
########################################################################
#macro (intoNV_dynsort $name $map)#foreach ($k in $dynamics.keySet())#set($i = $velocityCount-1)${prefix}NV_Ith_S(${name}, $i) = $map.get($k);
#end#end##
########################################################################
#macro (names2array $array $map)#foreach ($k in $map.keySet())#set($i = $velocityCount-1)${prefix}${array}[$i] = $k;
#end#end##
########################################################################
#macro (sign2num $s)#if ($s == "+")1#elseif($s == "-")-1#elseif($s == "0")0#else???#end#end##
########################################################################
#set ($idt1 = "    ")
#set ($idt2 = "$idt1$idt1")
#set ($idt3 = "$idt2$idt1")
#set ($idt4 = "$idt2$idt2")
########################################################################
########################################################################
/*****************************************************************/
/* C code automatically generated from a LEMS/SEM description.   */
/* Compile with enclosed Makefile.                               */
/* Work in progress, expect substantial changes in the template. */
/*****************************************************************/

\#include <stdio.h>
\#include <math.h>
\#include <sundials/sundials_types.h> 
\#include <nvector/nvector_serial.h>  
\#include <cvode/cvode_dense.h>       
\#include <cvode/cvode.h>             

/* Problem Constants */
\#define NEQ   $dynamics.size() /* number of equations */
#if($events)##
\#define NRF   $events.size() /* number of rootfinding functions */
#end
\#define RTOL  RCONST(1.0e-4)   /* scalar relative tolerance */
#foreach($d in $dynamics)##
#set($i = $velocityCount-1)
\#define ATOL$i RCONST(1.0e-6)   /* vector absolute tolerance components */
#end
\#define T0    RCONST($t_start)/* initial time */
\#define T1    RCONST($t_end)  /* total integration time */
\#define DT    RCONST($dt)     /* output stepsize */

static void PrintOutput(realtype t, N_Vector y);
static void PrintRootInfo(realtype t, N_Vector y, int *rootsfound);
static void PrintFinalStats(void *cvode_mem);
static int check_flag(void *flagvalue, char *funcname, int opt);
static int dstate_dt(realtype t, N_Vector state, N_Vector dstate, void *params);
#if($events)
static int root_functions(realtype t, N_Vector state, realtype *gout, void *params);
#end##

########################################################################
static int dstate_dt(realtype t, N_Vector state, N_Vector dstate,  void *p){

    realtype *pars = (realtype *) p;

 
#set($prefix = $idt1)##
#idx2names("pars", $parameters)##

#NV2names_dynsort("state", $state)##

#unpackNames($state_functions)##

#intoNV("dstate", $dynamics)##

    return(0);
}

#if($events)##
static int root_functions(realtype t, N_Vector state, realtype *gout, void *p)
{

    realtype *pars = (realtype *) p;

#NV2names_dynsort("state", $state)##
#idx2names("pars", $parameters)##
#unpackNames($state_functions)##

#foreach($e in $events)## 
    //$e.name
#set($i=$velocityCount-1)##
    gout[$i] = $e.condition;
#end##

    return(0);
}
#end##if($events)

########################################################################
########################################################################

int main(int narg, char **args)
{
    realtype reltol, t, tout;
    N_Vector state, abstol;
    void *cvode_mem;
    int flag, flagr;
#if($events)##
    int rootsfound[NRF];
    int rootdir[] = {#foreach($e in $events)#sign2num($e.direction),#end};
#end

    state = abstol = NULL;
    cvode_mem = NULL;

    state = N_VNew_Serial(NEQ);
    if (check_flag((void *)state, "N_VNew_Serial", 0)) return(1);
    abstol = N_VNew_Serial(NEQ); 
    if (check_flag((void *)abstol, "N_VNew_Serial", 0)) return(1);
    
#unpackNames($parameters)##
    realtype p[] = {#rollK($parameters)};

#unpackNames($state)##
#intoNV_dynsort("state", $state)##

    reltol = RTOL;
#foreach($x in $dynamics)##
#set($i = $velocityCount-1)##
    NV_Ith_S(abstol,$i) = ATOL$i;
#end##
 
    /* Allocations and initializations */
    cvode_mem = CVodeCreate(CV_BDF, CV_NEWTON);
    if (check_flag((void *)cvode_mem, "CVodeCreate", 0)) return(1);
    
    flag = CVodeInit(cvode_mem, dstate_dt, T0, state);
    if (check_flag(&flag, "CVodeInit", 1)) return(1);
   
    flag = CVodeSetUserData(cvode_mem, p);
    if (check_flag(&flag, "CVodeSetUserData", 1)) return(1);
   
    flag = CVodeSVtolerances(cvode_mem, reltol, abstol);
    if (check_flag(&flag, "CVodeSVtolerances", 1)) return(1);
   
    #if($events)##
    flag = CVodeRootInit(cvode_mem, NRF, root_functions);
    if (check_flag(&flag, "CVodeRootInit", 1)) return(1);

    CVodeSetRootDirection(cvode_mem, rootdir);
    if (check_flag(&flag, "CVodeSetRootDirection", 1)) return(1);
    #end##
    
   
    flag = CVDense(cvode_mem, NEQ);
    if (check_flag(&flag, "CVDense", 1)) return(1);


    printf(" \n Integrating $name \n\n");
    printf("#t #rollK($dynamics)\n");
    PrintOutput(t, state);
   
    tout = DT;
    while(1) {
        flag = CVode(cvode_mem, tout, state, &t, CV_NORMAL);
        
#if($events)##
        if(flag == CV_ROOT_RETURN) {
            /* Event detected */
            flagr = CVodeGetRootInfo(cvode_mem, rootsfound);
            if (check_flag(&flagr, "CVodeGetRootInfo", 1)) return(1);
            PrintRootInfo(t, state, rootsfound);
          
#set($prefix = $idt4)##
#set($Declare_float ="")##
#foreach($ev in $events)##
#set($i=$velocityCount-1)##
            if(rootsfound[$i]){
                //$ev.name
## change state 
#if($ev.effect.state)##
#NV2names_dynsort("state", $state)##
##unpackNames($ev.effect.state)##
#intoNV_dynsort("state", $ev.effect.state)##

#end##
## change pars 
#if($ev.effect.parameters)##
#unpackNames($ev.effect.parameters)##
#names2array("p", $parameters)##
#end##
	    }
#end##foreach($ev in $events)
            

	    /* Restart integration with event-corrected state */
    	    flag = CVodeSetUserData(cvode_mem, p);
    	    if (check_flag(&flag, "CVodeSetUserData", 1)) return(1);
	    CVodeReInit(cvode_mem, t, state);
	    PrintRootInfo(t, state, rootsfound);
	}
        else
        #end##if($events)
        {
            PrintOutput(t, state);
            if(check_flag(&flag, "CVode", 1)) break;
            if(flag == CV_SUCCESS) {
                tout += DT;
            }
            if (t >= T1) break;
        }

    }

    PrintFinalStats(cvode_mem);

    N_VDestroy_Serial(state);
    N_VDestroy_Serial(abstol);

    CVodeFree(&cvode_mem);

    return(0);
}



static void PrintOutput(realtype t, N_Vector state)
{
    unsigned int i = 0;
    printf("%g", t);
    for (i = 0; i < NEQ; i++){
        printf(" %g", NV_Ith_S(state, i));
    }
    printf("\n");

    return;
}

#if($events)
static void PrintRootInfo(realtype t, N_Vector state, int *rootfound)
{
    unsigned int i = 0;

    printf("#events ");
    for (i = 0; i < NRF; i++) if(rootfound[i]) printf("%d", i);
    printf(":%g", t);
    for (i = 0; i < NEQ; i++){
        printf(" %g", NV_Ith_S(state, i));
    }
    printf("\n");

    return;
}
#end##


static void PrintFinalStats(void *cvode_mem)
{
    long int nst, nfe, nsetups, nje, nfeLS, nni, ncfn, netf, nge;
    int flag;

    flag = CVodeGetNumSteps(cvode_mem, &nst);
    check_flag(&flag, "CVodeGetNumSteps", 1);
    flag = CVodeGetNumRhsEvals(cvode_mem, &nfe);
    check_flag(&flag, "CVodeGetNumRhsEvals", 1);
    flag = CVodeGetNumLinSolvSetups(cvode_mem, &nsetups);
    check_flag(&flag, "CVodeGetNumLinSolvSetups", 1);
    flag = CVodeGetNumErrTestFails(cvode_mem, &netf);
    check_flag(&flag, "CVodeGetNumErrTestFails", 1);
    flag = CVodeGetNumNonlinSolvIters(cvode_mem, &nni);
    check_flag(&flag, "CVodeGetNumNonlinSolvIters", 1);
    flag = CVodeGetNumNonlinSolvConvFails(cvode_mem, &ncfn);
    check_flag(&flag, "CVodeGetNumNonlinSolvConvFails", 1);

    flag = CVDlsGetNumJacEvals(cvode_mem, &nje);
    check_flag(&flag, "CVDlsGetNumJacEvals", 1);
    flag = CVDlsGetNumRhsEvals(cvode_mem, &nfeLS);
    check_flag(&flag, "CVDlsGetNumRhsEvals", 1);

    flag = CVodeGetNumGEvals(cvode_mem, &nge);
    check_flag(&flag, "CVodeGetNumGEvals", 1);

    printf("\nFinal Statistics:\n");
    printf("nst = %-6ld nfe  = %-6ld nsetups = %-6ld nfeLS = %-6ld nje = %ld\n",
           nst, nfe, nsetups, nfeLS, nje);
    printf("nni = %-6ld ncfn = %-6ld netf = %-6ld nge = %ld\n \n",
           nni, ncfn, netf, nge);
}


static int check_flag(void *flagvalue, char *funcname, int opt)
{
    int *errflag;

    /* Check if SUNDIALS function returned NULL pointer - no memory allocated */
    if (opt == 0 && flagvalue == NULL) {
      fprintf(stderr, "\nSUNDIALS_ERROR: %s() failed - returned NULL pointer\n\n",
              funcname);
      return(1); }

    /* Check if flag < 0 */
    else if (opt == 1) {
      errflag = (int *) flagvalue;
      if (*errflag < 0) {
        fprintf(stderr, "\nSUNDIALS_ERROR: %s() failed with flag = %d\n\n",
                funcname, *errflag);
        return(1); }}

    /* Check if function returned NULL pointer - no memory allocated */
    else if (opt == 2 && flagvalue == NULL) {
      fprintf(stderr, "\nMEMORY_ERROR: %s() failed - returned NULL pointer\n\n",
              funcname);
      return(1); }

    return(0);
}
